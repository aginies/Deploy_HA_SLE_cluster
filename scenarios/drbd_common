#!/bin/sh
#########################################################
#
#
#########################################################
## DRBD COMMON
#########################################################

if [ -f ../functions ] ; then
    . ../functions
else
    echo "! functions file needed! ; Exiting"
    exit 1
fi
if [ -f "${PWD}/nodes_ressources" ] ; then
    . ${PWD}/nodes_ressources
else
    echo "! functions file nodes_ressources needed! ; Exiting"
    exit 1
fi

check_load_config_file other

# SOME VARS
DRBDDEV="/dev/drbd0"
# by default DRBD
NODEA="${NODENAME}1"
NODEB="${NODENAME}2"
MNTTEST="/mnt/test"

install_packages_drbd() {
    echo $I "############ START install_packages_drbd" $O
    pssh -h /etc/hanodes "zypper in -y drbd-kmp-default drbd drbd-utils"
}

disable_drbd() {
    echo $I "############ START disable_drbd"
    echo "- Disable drbd service on node" $O
    exec_on_node ${NODEA} "systemctl disable drbd"
    exec_on_node ${NODEB} "systemctl disable drbd"
}

enable_drbd() {
    echo $I "############ START enable_drbd"
    echo "- Enable drbd service on node" $O
    exec_on_node ${NODEA} "systemctl enable drbd"
    exec_on_node ${NODEB} "systemctl enable drbd"
}

stop_drbd() {
    echo $I "############ START stop_drbd"
    echo "- Stop drbd service on node" $O
    exec_on_node ${NODEA} "systemctl stop drbd"
    exec_on_node ${NODEB} "systemctl stop drbd"
}

start_drbd() {
    echo $I "############ START start_drbd"
    echo "- Start drbd service on node" $O
    exec_on_node ${NODEA} "systemctl start drbd"
    exec_on_node ${NODEB} "systemctl start drbd"
}

check_primary_secondary() {
    echo $I "############ START check_primary_secondary"
    echo "- Create ${MNTTEST} directory" $O
    exec_on_node ${NODEA} "mkdir ${MNTTEST}"
    exec_on_node ${NODEB} "mkdir ${MNTTEST}"
    echo $I "- Mount /dev/drbd0" $O
    exec_on_node ${NODEA} "mount ${DRBDDEV} ${MNTTEST}"
    exec_on_node ${NODEA} "df -h ${MNTTEST}"
    echo $I "- Create a file in the FS" $O
    exec_on_node ${NODEA} "dd if=/dev/zero of=${MNTTEST}/testing bs=1M count=24"
    exec_on_node ${NODEA} "dd if=/dev/random of=${MNTTEST}/random count=20240"
    exec_on_node ${NODEA} "s${NODENAME}1sum  ${MNTTEST}/testing ${MNTTEST}/random > ${MNTTEST}/sha1sum"
    exec_on_node ${NODEA} "drbdadm status"
    exec_on_node ${NODEA} "drbdadm dstate drbdo2"
    echo $I "- Wait to get drbd sync" $O
    start=`date +%s`
    exec_on_node ${NODEA} "while (drbdadm status | grep Inconsistent); do sleep 5s; done"
    end=`date +%s`
    runtime=$((end-start))
    echo $I "- Time to get the DRBD ready: $runtime " $O
    exec_on_node ${NODEA} "drbdadm status"
    exec_on_node ${NODEA} "umount ${MNTTEST}"
    echo $I "- Switch ${NODEA} to secondary" $O
    exec_on_node ${NODEA} "drbdadm secondary drbdo2"
    exec_on_node ${NODEB} "drbdadm primary drbdo2"
    exec_on_node ${NODEB} "mount /dev/drbd0 ${MNTTEST}"
    exec_on_node ${NODEB} "cat ${MNTTEST}/s${NODENAME}1sum"
    exec_on_node ${NODEB} "s${NODENAME}1sum ${MNTTEST}/testing ${MNTTEST}/random > /mnt/testing_from_${NODEB}"
    exec_on_node ${NODEB} "diff -au ${MNTTEST}/s${NODENAME}1sum /mnt/testing_from_${NODEB}"
    if [ $? -eq 1 ]; then
        echo $W "- ! Warning; Corruption in FILES detected: s${NODENAME}1 are different" $O
    else
        echo $S "- Same S${NODENAME}1 from ${NODEA} and ${NODEB}: TEST OK" $O
    fi
    echo $I "- Test pause/resume sync " $O
    exec_on_node ${NODEB} "drbdadm pause-sync drbdo2"
    exec_on_node ${NODEB} "dd if=/dev/zero of=${MNTTEST}/testing2 bs=1M count=24"
    exec_on_node ${NODEA} "touch ${MNTTEST}/bspl{0001..10001}.c"
    #exec_on_node ${NODEA} "ls ${MNTTEST}/*.c"
    exec_on_node ${NODEB} "chmod -R 777 ${MNTTEST}/"
    exec_on_node ${NODEA} "chmod -R 775 ${MNTTEST}/"
    exec_on_node ${NODEB} "drbdadm status"
    exec_on_node ${NODEB} "drbdadm resume-sync drbdo2"
    exec_on_node ${NODEB} "drbdadm status"
}

umount_mnttest() {
    echo $I "############ START umount_mnttest" $O
    exec_on_node ${NODEA} "umount ${MNTTEST}" IGNORE
    exec_on_node ${NODEB} "umount ${MNTTEST}" IGNORE
}

drbdconf_csync2() {
    echo $I "###########Â²# START drbdconf_csync2"
    echo "- Corosync2 drbd conf" $O
    exec_on_node ${NODEA} "perl -pi -e 's|usage-count.*|usage-count no;|' /etc/drbd.d/global_common.conf"
    exec_on_node ${NODEA} "grep /etc/drbd.conf /etc/csync2/csync2.cfg"
    if [ $? -eq 1 ]; then
        exec_on_node ${NODEA} "perl -pi -e 's|}|\tinclude /etc/drbd.conf;\n\tinclude /etc/drbd.d;\n}|' /etc/csync2/csync2.cfg"
    else
        echo $W "- /etc/csync2/csync2.cfg already contains drbd files to sync" $O
    fi
    exec_on_node ${NODEA} "csync2 -xv"
}

