#!/bin/sh
CONF="havm.conf"

## color
# NORMAL
N=`echo -en "\\033[0;32m"`
# SUCCESS
S=`echo -en "\\033[1;32m"`
#INFO
I=`echo -en "\\033[1;34m"`
# WARNING / DELETE
W=`echo -en "\\033[1;33m"`
# OTHER
#O=`echo -en "\\033[0;39m"`
O=`echo -en "\\033[0m"`
#O=`echo -en ""
# FAILURE
F=`echo -en "\\033[1;31m"`

check_load_config_file() {
if [ "$1" == "other" ]; then CDIR=`dirname $PWD`; else CDIR=$PWD; fi
if [ -f $CDIR/${CONF} ]; then
    source ${CDIR}/${CONF}
else
    echo "!! ${CONF} not found in ${CDIR} path !!"
    exit 1
fi
}

# execute a command on a NODE from host
exec_on_node() {
    # first arg is NODE name, second arg is command
    if [ $# -lt 2 ]
    then
	echo $F "! Two args needed (NODE CMD); Exiting" $O
        exit 1
    fi
    NODE="$1"
    CMD="$2"
    # avoid: No pseudo-tty detected! Use -t option to ssh if calling remotely
    echo "${NODE}: ssh -T -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${NODE} \"${CMD}\"";
    ssh -q -T -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${NODE} "${CMD}"
    if [ "$?" -eq 0 ]
	then
	echo $S "- ssh command sucessful" $O
    else
	echo $F "- ! Return of the ssh command is not 0" $O
    fi
}

exec_pssh() {
    if [ $# -lt 1 ]
    then
        echo "! 1 arg needed (CMD);Exiting"
        exit 1
    fi
    CMD="$1"
    echo "pssh -h ${PSSHCONF} -x \"-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no\" \"$CMD\""
    pssh -h ${PSSHCONF} -x "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" "$CMD"
}

# scp a file to a NODE from host
scp_on_node() {
    # first arg is SOURCE file, last arg is NODE:/destination_dir
    if [ $# -lt 2 ];then
	echo "! 2 args needed (FILE NODE:DEST); Exiting"
        exit 1
    fi
    FILE="$1"
    DEST="$2"
    # avoid: No pseudo-tty detected! Use -t option to ssh if calling remotely
    echo "${NODE}: scp -o StrictHostKeyChecking=no ${FILE} ${DEST}"
    scp -q -o StrictHostKeyChecking=no ${FILE} ${DEST}
    if [ "$?" -eq 0 ]
	then
	echo $S "- scp command sucessful" $O
    else
	echo $F "- ! Return of scp command is not 0" $O
    fi
}

# create a pool (on host)
create_pool() {
    if [ $# -lt 1 ];then echo "! 1 arg needed: POOL_NAME; Exiting" ; exit 1; fi
    POOL=$1
    echo "############ START create a pool ${POOL} #############"
    virsh pool-list --all | grep ${POOL} > /dev/null
    if [ $? == "0" ]; then
        echo "- ${POOL} already present, deleting it"
        virsh pool-destroy ${POOL}
        virsh pool-undefine ${POOL}
        rm -rvf ${STORAGEP}/${POOL}
    fi
    echo "- Create ${POOL}"
    mkdir -p ${STORAGEP}/${POOL}
    virsh pool-define-as --name ${POOL} --type dir --target ${STORAGEP}/${POOL}
    virsh pool-start ${POOL}
    virsh pool-autostart ${POOL}
}

